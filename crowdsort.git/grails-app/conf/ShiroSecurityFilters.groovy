
/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */


class ShiroSecurityFilters {
    static nonAuthenticatedActions = [
            [controller: 'project', action: 'index'],
            [controller: 'register', action: 'index'],
            [controller: 'register', action: 'register']



    ]

    static authenticatedActions = [
            [controller: 'project', action: 'secured', roles: ['admin', 'ROLE_USER']],
            [controller: 'project', action: 'admin', roles: ['admin']],
            [controller: 'project', action: 'viewAll', roles: ['admin']],
            [controller: 'project', action: 'viewProjects', roles: ['admin', 'ROLE_USER']],
            [controller: 'project', action: 'newProject', roles: ['ROLE_USER']],
            [controller: 'project', action: 'project', roles: ['ROLE_USER']],
            [controller: 'project', action: 'addCategory', roles: ['ROLE_USER']],
            [controller: 'project', action: 'addPages', roles: ['ROLE_USER']],
            [controller: 'project', action: 'deleteProject', roles: ['ROLE_USER', 'admin']],
            [controller: 'project', action: 'logout', roles: ['ROLE_USER', 'admin']],
            [controller: 'project', action: 'removeCategory', roles: ['ROLE_USER']],
            [controller: 'project', action: 'removePage', roles: ['ROLE_USER']],
            [controller: 'project', action: 'startProject', roles: ['ROLE_USER']],
            [controller: 'project', action: 'updatePages', roles: ['ROLE_USER']],
            [controller: 'project', action: '*', roles: ['admin']],
            [controller: 'dashboard', action: '*', roles: ['admin', 'ROLE_USER']],

    ]



    def filters = {
        all(controller: '*', action: '*') {
            before = {
                // Ignore direct views (e.g. the default main index page).
                if (!controllerName) return true

                def needsAuth = !nonAuthenticatedActions.find {
                    (it.controller == controllerName) &&
                            ((it.action == '*') || (it.action == actionName))
                }

                if (needsAuth) {
                    def authRoles = authenticatedActions.find {
                        (it.controller == controllerName) &&
                                ((it.action == '*') || (it.action == actionName))
                    }

                    if (authRoles){
                        accessControl {
                            authRoles.roles.each { roleName ->
                                role(roleName)
                            }
                        }
                    }
                }

                else {
                    return true
                }



                // Access control by convention.
            }
        }
    }
}
